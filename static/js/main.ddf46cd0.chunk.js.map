{"version":3,"sources":["exercise-1/components/card/Card.jsx","exercise-1/components/card-list/CardList.jsx","exercise-1/components/search/Search.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","Search","placeholder","handleChange","type","onChange","App","state","searchField","console","log","fetch","then","response","json","users","setState","this","filtered","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUAceA,EAXF,SAACC,GACV,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACR,6BAA4BL,EAAMI,QAAQE,MAAjCN,EAAMI,QAAQC,IACvB,4BAAIL,EAAMI,QAAQG,YCGfC,EATE,SAAAR,GAEb,OACE,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAI,cAAC,EAAD,CAAMA,QAASA,UCIzCO,G,MARA,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACX,uBAAOZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCmCNG,E,kDAnCX,WAAYhB,GAAQ,IAAD,8BACf,cAAMA,IAEDiB,MAAQ,CACTR,SAAU,GACVS,YAAa,IALF,E,qDASnB,WAAqB,IAAD,OAChBC,QAAQC,IAAI,qBACZC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAKC,SAAS,CAACjB,SAAUgB,IACzBN,QAAQC,IAAIK,MAEpBN,QAAQC,IAAI,kB,oBAGhB,WAAU,IAAD,OACL,EAAgCO,KAAKV,MAA9BR,EAAP,EAAOA,SAAUS,EAAjB,EAAiBA,YACXU,EAAWnB,EAASoB,QAAO,SAAAzB,GAAO,OAAIA,EAAQE,KAAKwB,cAAcC,SAASb,EAAYY,kBAC5F,OACI,sBAAK7B,UAAU,MAAf,UACI,sDACA,cAAC,EAAD,CAAQW,YAAY,iBACZC,aAAe,SAAAmB,GAAC,OAAI,EAAKN,SAAS,CAACR,YAAac,EAAEC,OAAOC,WACjE,cAAC,EAAD,CAAUzB,SAAUmB,W,GA9BlBO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ddf46cd0.chunk.js","sourcesContent":["import {React} from 'react';\nimport './card.css';\n\nconst Card = (props) => {\n    return (\n        <div className='card-container'>\n            <img alt='monster'\n                 src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n            <h2 key={props.monster.id}>{props.monster.name}</h2>\n            <p>{props.monster.email}</p>\n        </div>\n    );\n\n}\nexport default Card;","import  React from 'react';\nimport './cardlist.css';\nimport Card from '../card/Card'\nconst CardList = props => {\n\n    return (\n      <div className='card-list'>\n          {props.monsters.map(monster =>(<Card monster={monster}/>))}\n      </div>\n    );\n\n}\nexport default CardList;\n\n","import React from 'react';\nimport './serach.css';\n\nconst Search = ({placeholder, handleChange}) => (\n    <input className='search'\n           type='search'\n           placeholder={placeholder}\n           onChange={handleChange}>\n    </input>\n);\n\nexport default Search;","import './App.css';\nimport {Component, React} from 'react';\nimport CardList from './exercise-1/components/card-list/CardList';\nimport Search from \"./exercise-1/components/search/Search\";\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            monsters: [],\n            searchField: \"\",\n        };\n    }\n\n    componentDidMount() {\n        console.log(\"mounted component\");\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => {\n                this.setState({monsters: users});\n                console.log(users)\n            });\n        console.log(\"All exported\");\n\n    }\n    render() {\n        const {monsters, searchField} = this.state;\n        const filtered = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n        return (\n            <div className='App'>\n                <h1>Monsters In Charge !</h1>\n                <Search placeholder='search monster'\n                        handleChange={ e => this.setState({searchField: e.target.value})}/>\n                <CardList monsters={filtered}/>\n            </div>\n        )\n    }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}